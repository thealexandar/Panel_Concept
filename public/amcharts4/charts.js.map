{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","webpack:///../../../../../src/.internal/charts/types/FlowDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/LabelBullet.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyNode.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyLink.ts","webpack:///../../../../../src/.internal/charts/types/SankeyDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelSlice.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelTick.ts","webpack:///../../../../../src/.internal/charts/series/FunnelSeries.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/ErrorBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///./charts.js"],"names":["DateAxisBreak_DateAxisBreak","_super","DateAxisBreak","_this","call","this","className","applyTheme","tslib_es6","Object","defineProperty","prototype","getPropertyValue","value","setPropertyValue","startValue","getTime","axis","invalidate","invalidateSeries","endValue","ValueAxisBreak","Registry","registeredClasses","DateAxis_DateAxisDataItem","DateAxisDataItem","values","date","endDate","dates","setDate","ValueAxis","DateAxis_DateAxis","DateAxis","gridIntervals","List","dateFormats","Dictionary","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minDifference","snapTooltip","tooltipPosition","pushAll","axisFieldName","fillRule","dataItem","component","gridInterval","_gridInterval","gridDuration","Time","Math","round","min","axisFill","__disabled","applyInternalDefaults","hasKey","setKey","language","translate","createDataItem","createAxisBreak","validateDataItems","start","end","periodCount","max","baseDuration","maxZoomFactor","_deltaMinMax","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","adjustDifference","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","getFirstWeekDay","dateFormatter","utc","_nextGridUnit","_intervalDuration","ceil","_difference","floor","Iterator","series","iterator","baseAxis","field_1","getAxisField","minZoomed","minZoomedStr","toString","startDataItem","dataItemsByAxis","getKey","uid","startIndex","findFirst","index","dataItems","findClosestIndex","x","maxZoomed","maxZoomedStr","endDataItem","endIndex","length","dataRangeInvalid","validateDataRange","time","key","previousDataItem","getIndex","previousDate","validateData","Type","minDifference","Number","MAX_VALUE","each","seriesDataChangeUpdate","postProcessSeriesDataItems","JSON","stringify","_baseInterval","postProcessSeriesDataItem","addEmptyUnitsBreaks","utils_Object","getDate","startTime","setCalculatedValue","skipEmptyPeriods","axisBreaks","clear","axisBreak","this_1","startTimeStr","undefined","create","startDate","fixAxisBreaks","breakGridCount","endPosition","startPosition","adjustedEndValue","adjustedStartValue","gridDate","firstDayOfWeek","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","isInBreak","durationBreaksRemoved","getBreaklessDate","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","resetIterators","this_2","format","markUnitChange","text","find","appendDataItem","validateDataElement","renderer_1","renderer","breakSize","timeUnit_1","intervalCount_1","utils_Math","startPoint","endPoint","minGridDistance","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","position","valueToPosition","fillEndPosition","isRange","tick","disabled","updateTickElement","grid","updateGridElement","fill","updateFillElement","mask","bullet","updateBullet","label","location_1","location","updateLabelElement","adjustMinMax","step","fixMin","startLocation","fixMax","endLocation","duration","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","anyToPosition","dateToPoint","point","positionToPoint","angle","positionToAngle","y","anyToPoint","valueToPoint","positionToDate","positionToValue","getX","getTimeByLocation","baseValue","getY","stack","getValue","getAngle","stackKey","workingLocations","endTime","processSeriesDataItem","axisLetter","openTime","openDate","prevSeriesTime","_prevSeriesTime","difference","abs","differece","updateAxisBySeries","timeInterval","invalidateData","breakTemplate","template","startLine","endLine","fillShape","getTooltipText","tooltipDateFormat","dateFormat","getPositionLabel","adapter","apply","roundPosition","getCellStartPosition","getCellEndPosition","getSeriesDataItem","findNearest","key_1","Infinity","getCurrentLabelFormat","initRenderer","ticks","labels","baseGrid","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","asIs","field","copyFrom","source","showTooltipAtPosition","local","toAxisPosition","closestDate_1","actualTime_1","xAxis","dateX","yAxis","dateY","closestTime_1","tooltipLocation","showTooltipAtDataItem","chart","_seriesPoints","push","tooltipText","tooltipHTML","hideTooltip","makeGap","previous","connect","autoGapCount","CategoryAxisBreak_CategoryAxisBreak","CategoryAxisBreak","indexToPosition","invalidateDataItems","category","categoryToIndex","AxisBreak","CategoryAxis_CategoryAxisDataItem","CategoryAxisDataItem","Adapter","seriesDataItems","locations","endCategory","isEnabled","properties","setProperty","Axis","CategoryAxis_CategoryAxis","CategoryAxis","dataItemsByCategory","_lastDataItem","_disposers","categoryAxisDataItem","seriesId","_series","invalidateDataRange","positionToIndex","minIndex","maxIndex","i","axisDataItem","i_1","seriesDataItem","validate","dataCount","invalid","maxCount","axisLength","frequency","_startIndex","_endIndex","_frequency","itemIndex","len","frequency_1","itemIndex_1","b","validateBreaks","validateAxisRanges","ghostLabel","invalidateLayout","fillEndIndex","fillPosition","AxisRendererY","measuredWidth","AxisRendererX","measuredHeight","html","currentText","disposeData","processDataItem","dataContext","getDataItem","dataFields","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","getFirstSeriesDataItem","categoryX","categoryY","getLastSeriesDataItem","index_1","sdi_1","category_1","categories","basePoint","breakStartPosition","breakEndPosition","breakPosition","positionToCategory","XYSeries_XYSeriesDataItem","XYSeriesDataItem","valueX","valueY","openValueX","openValueY","openDateX","openDateY","setLocation","setValue","setCategory","openCategoryX","openCategoryY","getMin","fields","working","stackValue","utils_Array","getWorkingValue","getMax","Series","XYSeries_XYSeries","XYSeries","_xAxis","Disposer","_yAxis","_xValueFields","_yValueFields","isMeasured","cursorTooltipEnabled","cursorHoverEnabled","excludeFromTotal","mainContainer","Sprite","setElement","paper","add","stacked","tooltip","pointerOrientation","events","on","returnBulletDefaultState","readerTitle","dataChangeUpdate","_tmin","_tmax","_smin","_smax","defineFields","data","updateItemReaderText","_xField","_yField","Error","name","disable","enable","setInitialWorkingValues","e","_chart","raiseCriticalError","updateDataItem","dataItemsX","clearCatAxis","dataItemsY","xAxisFieldName","xField","xOpenField","Utils","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","axisRanges","range","fillPath","path","Path","width","height","pixelY","pixelX","_showBullets","minBulletDistance","get","xAxes","oldAxis","removeKey","dispose","removeValue","set","registerSeries","yAxes","_baseAxis","processValues","minX","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","stackedSeries","isDisposed","dispatchImmediately","appeared","_prevTooltipDataItem","xPosition","yPosition","visible","isHiding","isShowing","updateLegendValue","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","type","target","_a","sprites","_b","next","done","sprite","parent","isHidden","isHover","showTooltip","shouldCreateBullet","bulletTemplate","hasValue","disabledField","propertyFields","positionBullet","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","locationX","locationY","moveTo","bulletLocation","show","anim","delay","interpolationDuration","defaultState","transitionDuration","a","sequencedInterpolation","sequencedInterpolationDelay","animation","isFinished","hide","hiddenState","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","backwards","prevSeries","prevDataItem","prevValue","prevRealValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","processingErrors","xKey","yKey","stackKeyX","stackKeyY","val","itemReaderText","Cursor_Cursor","Cursor","_stick","Percent","shouldClone","trackable","clickable","interaction","Interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","event","interactionsEnabled","interactions","isTouchProtected","touch","_generalBehavior","downPoint","isLocalElement","pointer","svg","_stickPoint","fitsToBounds","triggerMove","hideReal","stick","triggerMoveReal","invalidatePosition","getPositions","dispatch","triggerDown","triggerDownReal","setGlobalStyle","Mouse","grabbing","triggerUp","triggerUpReal","updatePoint","upPoint","_upPointOrig","_downPointOrig","getHitOption","default","updateSelection","innerWidth","innerHeight","cancelable","shouldPreventGestures","preventDefault","plotContainer","lockElement","Container","XYCursor_XYCursor","XYCursor","_lineX","_lineY","behavior","maxPanOut","interfaceColors","InterfaceColorSet","selection","createChild","fillOpacity","getFor","lineX","stroke","Color","strokeDasharray","strokeOpacity","lineY","updateSize","_usesSelection","w","_positionPrecision","h","pixelHeight","pixelWidth","validatePosition","fixPoint","snapToSeries","updateLinePositions","getPanningRanges","selectionX","selectionY","getRanges","startX","startY","deltaX","deltaY","xRange","yRange","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","reset","_selection","element","_snapToDisposer","handleSnap","opposite","xx","yy","animationDuration","easing","animationEasing","animate","property","to","XYChartScrollbar_XYChartScrollbar","XYChartScrollbar","padding","scrollbarChart","XYChart_XYChart","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","toBack","_unselectedOverlay","background","cornerRadius","thumbBackground","thumb","hoverState","states","downState","handleSeriesAdded","handleSeriesRemoved","sourceSeries","newValue","zoomOutButton","addXAxis","addYAxis","clone","title","rangeChangeDuration","id","inside","line","minLabelPosition","maxLabelPosition","axisFills","clonedFrom","showOnInit","zoomOutAxes","filters","DesaturateFilter","updateByOrientation","orientation","oldValue","off","handleDataChanged","dataProvider","updateThumb","Scrollbar","XYChart_XYChartDataItem","XYChartDataItem","SerialChart","XYChart","_axisRendererX","_axisRendererY","maskBullets","arrangeTooltips","chartContainer","layout","topAxesCont","zIndex","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","bulletsContainer","ZoomOutButton","align","valign","MAX_SAFE_INTEGER","marginTop","marginRight","axisBulletsContainer","_bulletMask","exportable","draw","toFront","updateSeriesLegend","updatePlotElements","_parseDataFrom","leftAxesWidth","rightAxesWidth","paddingLeft","paddingRight","reinit","handleXAxisChange","updateXAxis","handleYAxisChange","updateYAxis","processXAxis","observe","handleXAxisRangeChange","processAxis","processYAxis","handleYAxisRangeChange","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","seriesAppeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","processRenderer","_dataUsers","gridContainer","breakContainer","addDisposer","dataUsers","inited","updateSeriesMasks","_xAxes","handleAxisRemoval","autoDispose","_yAxes","removeFromInvalidComponents","dataInvalid","colors","_cursor","cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","tapToActivate","setTapToActivate","createCursor","showSeriesTooltip","exceptAxis","showAxisTooltip","sortSeriesTooltips","hideObjectTooltip","seriesPoints","setBounds","topLeft","bottomRight","sum","filteredSeriesPoints","seriesPoint","sort","averageY","svgContainer","SVGContainer","top_1","bottom","dropped","nextHeight","pointY","pixelMarginTop","nextY","pixelMarginBottom","except","getUpdatedRange","priority","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","panStartRange","axisRange","newStart","newEnd","newRange","_scrollbarX","startGrip","endGrip","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","declination","realRange","handleWheel","svgPoint","htmlContainer","cssScale","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","maxWidth","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","createSeries","_zoomOutButton","button","addData","rawDataItem","removeCount","addScrollbarData","removeScrollbarData","remove","dataUser","removeData","handleTapToActivate","handleTapToActivateDeactivation","Responsive","relevant","maybeXS","state","stateId","LineSeriesSegment_LineSeriesSegment","LineSeriesSegment","fillSprite","strokeSprite","drawSegment","points","closePoints","smoothnessX","smoothnessY","Smoothing","smooth","lineElement","fillElement","LineSeries_LineSeriesDataItem","LineSeriesDataItem","LineSeries_LineSeries","LineSeries","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","tensionX","tensionY","segmentsContainer","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegmentWrapper","_adjustedStartIndex","sliceData","findAdjustedIndex","_workingStartIndex","_workingEndIndex","adjustedIndex","openIndex","params","openSegment","addToClose","closeIndex","propertiesChanged","getFirst","contents","valuesFound","hasProperties","updateSegmentProperties","addPoints","closeSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","Line","x2","Rectangle","legendDataItem","color","colorOrig","bullets","Bullet","copyToLegendMarker","hasLabels","children","child","Label","RadarSeries_RadarSeriesDataItem","RadarSeriesDataItem","RadarSeries_RadarSeries","RadarSeries","connectEnds","radius","startAngle","endAngle","pixelRadius","pixelInnerRadius","unshift","RadarCursor_RadarCursor","RadarCursor","innerRadius","truePixelRadius","updateLineX","updateLineY","fillStartAngle","arc","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","sin","cos","upAngle","upRadius","setPercentProperty","innerRadiusModifyer","AxisFillCircular_AxisFillCircular","AxisFillCircular","AxisFill","GridCircular_GridCircular","GridCircular","pixelPerfect","Grid","AxisRendererCircular_AxisRendererCircular","AxisRendererCircular","pixelRadiusReal","useChartAngles","setAxis","atan2","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","AxisBullet","positionItem","fixPosition","invalidateAxisItems","createGrid","createFill","createLabel","AxisLabelCircular","pointToPosition","coordinateToPosition","AxisRenderer","AxisRendererRadial_AxisRendererRadial","AxisRendererRadial","gridType","axisAngle","horizontalCenter","verticalCenter","rotation","gridLocation","count_1","cellEndLocation","updateBaseGridElement","count_2","updateBreakElement","createBreakSprites","WavedCircle","updateTooltip","tooltipOrientation","bigNum","axisFullLength","RadarChart_RadarChartDataItem","RadarChartDataItem","RadarChart_RadarChart","RadarChart","radarContainer","Circle","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","_pixelInnerRadius","definedBBox","ClockHand_ClockHand","ClockHand","_axis","pin","startWidth","endWidth","hand","Trapezoid","leftSide","rightSide","x0","x1","_pin","_hand","showValue","_value","newAngle","currentAngle","rotationDirection","updateValue","GaugeChart_GaugeChartDataItem","GaugeChartDataItem","GaugeChart_GaugeChart","GaugeChart","hands","processHand","PieSeries3D_PieSeries3DDataItem","PieSeries3DDataItem","depthValue","PieSeries","PieSeries3D_PieSeries3D","PieSeries3D","createSlice","Slice3D","slice","depth","depthPercent","percent","PieChart3D_PieChart3DDataItem","PieChart3DDataItem","PieChart","PieChart3D_PieChart3D","PieChart3D","invalidateDataUsers","SlicedChart_SlicedChartDataItem","SlicedChartDataItem","PercentChart","SlicedChart_SlicedChart","SlicedChart","FlowDiagramNode_FlowDiagramNode","FlowDiagramNode","legendSettings","Legend","draggable","inert","setStateOnChildren","invalidateLinks","handleHit","outgoingDataItems","toNode","incomingDataItems","fromNode","link","colorMode","gradient","stop_1","stops","stop_2","_incomingDataItems","sortBy","_incomingSorted","utils_String","fromName","Order","utils_Number","_outgoingDataItems","_outgoingSorted","setColorProperty","_background","removeChildren","column","RoundedRectangle","_legendDataItem","itemContainer","deepInvalidate","FlowDiagramLink_FlowDiagramLink","FlowDiagramLink","positionBullets","_bulletsContainer","_bulletsMask","bulletsMask","middleLine","rotationField","addColor","setFill","_gradient","measureElement","_bullets","Polyline","getTooltipX","getTooltipY","LinearGradient","FlowDiagram_FlowDiagramDataItem","FlowDiagramDataItem","toName","_link","link_1","links","addSprite","Chart","FlowDiagram_FlowDiagram","FlowDiagram","ColorSet","nodePadding","minNodeSize","linksContainer","nodesContainer","nodes","sortNodes","low","high","node","strokeModifier","LinearGradientModifier","opacities","fillModifier","strNode","getNodeValue","feedLegend","_sorted","sortedIterator","total","incomingTotal","outgoingTotal","totalIncoming","totalOutgoing","changeSorting","_nodes","createNode","_links","createLink","legend","legendData_1","LabelBullet_LabelBullet","LabelBullet","truncate","hideOversized","handleMaxSize","SankeyNode_SankeyNode","SankeyNode","nextInCoord","nextOutCoord","nameLabel","valueLabel","orientation_1","dx","dy","linkWidth","valueHeight","SankeyLink_SankeyLink","SankeyLink","tension","controlPointDistance","Polyspline","isTemplate","y0","y1","xt0","yt0","xt1","yt1","xb0","xb1","yb0","yb1","xm0","xm1","ym0","ym1","_bbox","cpd","kxt0","kyt0","kxt1","kyt1","kxm0","kym0","kxm1","kym1","kxb0","kyb0","kxb1","kyb1","SankeyDiagram_SankeyDiagramDataItem","SankeyDiagramDataItem","SankeyDiagram_SankeyDiagram","SankeyDiagram","nodeAlign","_levelCount","level","getNodeLevel","levels","calculateValueHeight","_levelSum","_levelNodesCount","maxSum","availableHeight","maxSumLevel","realValue","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","err","Animation","from","container","nextCoordinate","levelCoordinate","nodeCount","showReal","container_1","interpolationEasing","nodeHeight","_valueHeight","ChordNode_ChordNode","ChordNode","updateRotation","Slice","ix","iy","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","nonRibbon","percentWidth","valueAngle","mAngle","trueStartAngle","tx","ty","QuadraticCurve_QuadraticCurve","QuadraticCurve","y2","cpx","cpy","p1","p2","cp","d","point1","point2","ChordLink_ChordLink","ChordLink","fromX","fromY","toX","toY","mAngle1","mAngle2","ChordDiagram_ChordDiagramDataItem","ChordDiagramDataItem","ChordDiagram_ChordDiagram","ChordDiagram","chordContainer","newTotal","Column_Column","Column","createAssets","handleKidAdded","ColumnSeries_ColumnSeriesDataItem","ColumnSeriesDataItem","_column","setColumn","columns","_rangesColumns","ColumnSeries_ColumnSeries","ColumnSeries","_startLocation","_endLocation","clustered","columnsContainer","_columnsContainer","baseAxisSeries","clusterCount","cellStartLocation","disableUnusedColumns","validateDataElementReal","getStartLocation","simplifiedProcessing","getEndLocation","l","r","t","percentHeight","pixelPaddingLeft","pixelPaddingRight","paddingTop","pixelPaddingTop","paddingBottom","pixelPaddingBottom","outOfBounds","offset","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","axisLenght","rightLocation","leftLocation","column_1","itemsFocusable","role","focusable","ev","populateString","realX","realY","realWidth","realHeight","virtualParent","setColumnStates","rangeColumn","rangesColumns","itemWidth","itemHeight","open_1","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","_columns","createColumnTemplate","fromOpenState_1","fromPreviousState_1","TreeMapSeries_TreeMapSeriesDataItem","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","toValue","TreeMapSeries_TreeMapSeries","TreeMapSeries","configField","TreeMap_TreeMapDataItem","TreeMapDataItem","rows","hasChildren","getDuration","childValue","TreeMap_TreeMap","TreeMap","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","_tempSeries","homeDataItem","_homeText","getMinMax","layoutItems","_updateDataItemIndexes","navigationData","parentDataItem","initSeries","reverse","createTreeSeriesReal","setData","currentlyZoomed","cursorOverStyle","zoomToSeriesDataItem","toggleBullets","rangeChangeAnimation","_dataDisposers","once","binaryTree","dice","sliceDice","validateLayout","validateRawData","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","handleDataItemValueChange","getLegendLevel","legendParent","getExporting","exporting","info","AxisRendererX3D_AxisRendererX3D","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D_AxisRendererY3D","AxisRendererY3D","getWidth","Column3D_Column3D","Column3D","column3D","Rectangle3D","ColumnSeries3D_ColumnSeries3DDataItem","ColumnSeries3DDataItem","ColumnSeries3D_ColumnSeries3D","ColumnSeries3D","XYChart3D_XYChart3DDataItem","XYChart3DDataItem","XYChart3D_XYChart3D","XYChart3D","fixLayout","fixColumns","depthIndex","s","inversed_1","maskColumns","Candlestick_Candlestick","Candlestick","lowLine","highLine","CandlestickSeries_CandlestickSeriesDataItem","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries_CandlestickSeries","CandlestickSeries","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC_OHLC","OHLC","openLine","highLowLine","closeLine","OHLCSeries_OHLCSeriesDataItem","OHLCSeriesDataItem","OHLCSeries_OHLCSeries","OHLCSeries","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesSegment_StepLineSeriesSegment","StepLineSeriesSegment","noRisers","vertical","StepLineSeries_StepLineSeriesDataItem","StepLineSeriesDataItem","StepLineSeries_StepLineSeries","StepLineSeries","prevPoint","point0","RadarColumn_RadarColumn","RadarColumn","radarColumn","RadarColumnSeries_RadarColumnSeriesDataItem","RadarColumnSeriesDataItem","RadarColumnSeries_RadarColumnSeries","RadarColumnSeries","lAngle","rAngle","tRadius","bRadius","cellAngle","temp","FunnelSlice_FunnelSlice","FunnelSlice","bottomWidth","topWidth","expandDistance","pt","pb","pr","pl","ed","tl","tw","tr","br","bw","bl","cpr","cpl","qp1","qp2","tickPoint","tt","tb","bt","bb","mlx","mty","FunnelTick_FunnelTick","FunnelTick","_label","_slice","labelsOpposite","maxRight","p0","maxBottom","Tick","FunnelSeries_FunnelSeriesDataItem","FunnelSeriesDataItem","_sliceLink","sliceLink_1","sliceLinks","slicesContainer","PercentSeries","FunnelSeries_FunnelSeries","FunnelSeries","_nextY","labelsContainer","bottomRatio","createTick","initSlice","scale","handleSliceScale","handleSliceMove","initLabel","labelTemplate","alignLabels","dItem","_total","_count","arrangeLabels","getNextValue","nextValue","nextItem","formDataElement","sliceLink","decorateSlice","linkHeight","lastLabel","lastY","lastX","_sliceLinks","setAlignLabels","labelAlign","labelValign","PyramidSeries_PyramidSeriesDataItem","PyramidSeriesDataItem","PyramidSeries_PyramidSeries","PyramidSeries","pyramidHeight","valueIs","_nextWidth","relValue","_pyramidHeight","_pyramidWidth","ticksContainer","pyramidWidth","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","sliceWidth","PictorialStackedSeries_PictorialStackedSeriesDataItem","PictorialStackedSeriesDataItem","PictorialStackedSeries_PictorialStackedSeries","PictorialStackedSeries","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","slices","hs","ConeColumn_ConeColumn","ConeColumn","coneColumn","Cone","ConeSeries_ConeSeriesDataItem","ConeSeriesDataItem","ConeSeries_ConeSeries","ConeSeries","radiusY","CurvedColumn_CurvedColumn","CurvedColumn","curvedColumn","CurvedColumnSeries_CurvedColumnSeriesDataItem","CurvedColumnSeriesDataItem","CurvedColumnSeries_CurvedColumnSeries","CurvedColumnSeries","DurationAxis_DurationAxisDataItem","DurationAxisDataItem","DurationAxis_DurationAxis","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet_CircleBullet","CircleBullet","circle","ErrorBullet_ErrorBullet","ErrorBullet","errorLine","isDynamic","NavigationBar_NavigationBarDataItem","NavigationBarDataItem","DataItem","NavigationBar_NavigationBar","NavigationBar","textLink","TextLink","_linksIterator","triangle","Triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","Component","window","am4charts","charts_namespaceObject"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { LineSeriesDataItem } from \"../series/LineSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tthis._deltaMinMax = this.baseDuration / 2;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit, gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.max(-5, Math.floor(this.start * count) - 3); // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\tlet minZoomed = $time.round(new Date(this._minZoomed), this.baseInterval.timeUnit, this.baseInterval.count).getTime();\r\n\t\t\t\tlet minZoomedStr = minZoomed.toString();\r\n\t\t\t\tlet startDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(minZoomedStr);\r\n\t\t\t\tlet startIndex: number = 0;\r\n\t\t\t\tif (this.start != 0) {\r\n\t\t\t\t\tif (startDataItem) {\r\n\t\t\t\t\t\tstartDataItem = this.findFirst(startDataItem, minZoomed, field);\r\n\t\t\t\t\t\tstartIndex = startDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstartIndex = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet baseInterval = this.baseInterval;\r\n\t\t\t\tlet maxZoomed = $time.add($time.round(new Date(this._maxZoomed), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc).getTime();\r\n\r\n\t\t\t\tlet maxZoomedStr = maxZoomed.toString();\r\n\t\t\t\tlet endDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(maxZoomedStr);\r\n\t\t\t\tlet endIndex: number = series.dataItems.length;\r\n\t\t\t\tif (this.end != 1) {\r\n\t\t\t\t\tif (endDataItem) {\r\n\t\t\t\t\t\tendIndex = endDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmaxZoomed -= 1;\r\n\t\t\t\t\t\tendIndex = series.dataItems.findClosestIndex(maxZoomed, (x) => <number>x[field], \"right\") + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\r\n\t\t\t\tif(series.dataRangeInvalid){\r\n\t\t\t\t\tseries.validateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected findFirst(dataItem: XYSeriesDataItem, time: number, key: string): XYSeriesDataItem {\r\n\t\tlet index = dataItem.index;\r\n\t\tif (index > 0) {\r\n\t\t\tlet series = dataItem.component;\r\n\t\t\tlet previousDataItem = series.dataItems.getIndex(index - 1);\r\n\t\t\tlet previousDate = (<any>previousDataItem)[key];\r\n\t\t\tif (!previousDate || previousDate.getTime() < time) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.findFirst(previousDataItem, time, key);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tlet minDifference = Number.MAX_VALUE;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.baseInterval)) {\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t\t});\r\n\t\t\t\tseries._baseInterval[this.uid] = this.baseInterval;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\tlet series: XYSeries = dataItem.component;\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet time = date.getTime();\r\n\r\n\t\t\tlet startDate: Date = $time.round(new Date(time), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet startTime = startDate.getTime();\r\n\t\t\tlet endDate: Date = $time.add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startTime, \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tdataItemsByAxis.setKey(startTime.toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\t\tif (axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\t\tlet gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.dateFormatter.utc);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getFirstWeekDay(): number {\r\n\t\tif (this.dateFormatter) {\r\n\t\t\treturn this.dateFormatter.firstDayOfWeek;\r\n\t\t}\r\n\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param date           [description]\r\n\t * @param intervalCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount, this.dateFormatter.utc).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak && axisBreak.endDate) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(newDate, timeUnit, realIntervalCount, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount, this.dateFormatter.utc);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axisBreak  [description]\r\n\t * @param timeUnit   [description]\r\n\t * @param count      [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate($time.copy(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count, this.dateFormatter.utc).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\t\t\tlet fillEndPosition = endPosition;\r\n\r\n\t\t\tif (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tif(dataItem.bullet){\r\n\t\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param min  Min timestamp\r\n\t * @param max  Max timestamp\r\n\t * @return Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param index      [description]\r\n\t * @param duration   [description]\r\n\t * @param gridCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param date  Date\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param date  Date or a timestamp\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param date Date\r\n\t * @return IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param key       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime = time;\r\n\r\n\t\tif (series._baseInterval[this.uid]) {\r\n\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._baseInterval) {\r\n\t\t\t\tseries._baseInterval[this.uid] = this._baseInterval;\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\r\n\t\t// handle short months\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\tif(baseInterval.timeUnit == \"month\"){\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 2) && baseInterval.count == 1) {\r\n\t\t\t\tbaseInterval.count = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 3) && baseInterval.count == 2) {\r\n\t\t\t\tbaseInterval.count = 3;\r\n\t\t\t}\t\t\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 6) && baseInterval.count == 5) {\r\n\t\t\t\tbaseInterval.count = 6;\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n\t\t\tbaseInterval.timeUnit = \"week\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n\t\t\tbaseInterval.timeUnit = \"year\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tif (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n\t\t\tthis._baseInterval = timeInterval;\r\n\t\t\tif(!$type.isNumber(timeInterval.count)){\r\n\t\t\t\ttimeInterval.count = 1;\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position\r\n\t * @return Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position Source position\r\n\t * @param location  Location in the cell\r\n\t * @return Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count, this.dateFormatter.utc);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param series       Series\r\n\t * @param position     Position (px)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\tlet dataItem = dataItemsByAxis.getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\r\n\t\t\tlet key: \"dateX\" | \"dateY\";\r\n\r\n\t\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\t\tkey = \"dateY\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tkey = \"dateX\";\r\n\t\t\t}\r\n\r\n\t\t\tdataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), (x) => {\r\n\t\t\t\tif (x[key]) {\r\n\t\t\t\t\treturn <number>x[key].getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -Infinity;\r\n\t\t\t\t}\r\n\t\t\t}, \"any\"));\r\n\t\t}\r\n\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param startDate       Start date\r\n\t * @param endValue        End date\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif (source[\"_baseInterval\"]) {\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (this.snapTooltip) {\r\n\t\t\tlet actualDate = $time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tlet closestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = $time.round(new Date(closestTime), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tclosestTime = closestDate.getTime();\r\n\r\n\t\t\t\tlet tooltipLocation = this.renderer.tooltipLocation;\r\n\t\t\t\tif(tooltipLocation == 0){\r\n\t\t\t\t\ttooltipLocation = 0.0001;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration * tooltipLocation);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\r\n\t\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(closestTime.toString());\r\n\t\t\t\t\tlet point = series.showTooltipAtDataItem(dataItem);\r\n\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\tthis.chart._seriesPoints.push({ series: series, point: point });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// check, otherwise column tooltip will be hidden\r\n\t\t\t\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//this.chart.sortSeriesTooltips(seriesPoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current grid interval.\r\n\t *\r\n\t * @return Grid interval\r\n\t */\r\n\tpublic get gridInterval(): ITimeInterval {\r\n\t\treturn this._gridInterval;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeGap(dataItem: LineSeriesDataItem, previous: LineSeriesDataItem): boolean {\r\n\t\tlet series = dataItem.component;\r\n\t\tif (dataItem && previous) {\r\n\t\t\tif (!series.connect && $type.isNumber(series.autoGapCount)) {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet time = dataItem.dates[\"date\" + this.axisLetter].getTime();\r\n\t\t\t\t\tlet prevTime = previous.dates[\"date\" + this.axisLetter].getTime();\r\n\r\n\t\t\t\t\tif (time - prevTime > series.autoGapCount * this.baseDuration) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererX } from \"./AxisRendererX\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Adapter } from \"../../core/utils/Adapter\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t */\r\n\tpublic adapter = new Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>(this);\r\n\r\n\tpublic seriesDataItems: { [index: string]: XYSeriesDataItem[] } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this.adapter.isEnabled(\"category\")) {\r\n\t\t\treturn this.adapter.apply(\"category\", this.properties.category);\r\n\t\t}\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties.endCategory;\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tsuper.processSeriesDataItem(dataItem, axisLetter);\r\n\t\tlet category: string = (<any>dataItem)[\"category\" + this.axisLetter];\r\n\r\n\t\tlet categoryAxisDataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (categoryAxisDataItem) {\r\n\t\t\tlet seriesId = dataItem.component.uid;\r\n\t\t\tlet seriesDataItems = categoryAxisDataItem.seriesDataItems[seriesId];\r\n\t\t\tif (!seriesDataItems) {\r\n\t\t\t\tseriesDataItems = [];\r\n\t\t\t\tcategoryAxisDataItem.seriesDataItems[seriesId] = seriesDataItems;\r\n\t\t\t}\r\n\t\t\tseriesDataItems.push(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet startIndex = this.positionToIndex(this.start);\r\n\t\t\t\tlet endIndex = this.positionToIndex(this.end);\r\n\r\n\t\t\t\tif (endIndex >= this.dataItems.length) {\r\n\t\t\t\t\tendIndex--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesId = series.uid;\r\n\t\t\t\tlet minIndex: number;\r\n\t\t\t\tlet maxIndex: number;\r\n\r\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\t\t\t\tlet axisDataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (axisDataItem) {\r\n\t\t\t\t\t\tlet seriesDataItems = axisDataItem.seriesDataItems[seriesId];\r\n\r\n\t\t\t\t\t\tif (seriesDataItems) {\r\n\t\t\t\t\t\t\tfor (let i = 0; i < seriesDataItems.length; i++) {\r\n\t\t\t\t\t\t\t\tlet seriesDataItem = seriesDataItems[i];\r\n\t\t\t\t\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\t\t\t\t\tlet index = seriesDataItem.index;\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(minIndex) || index < minIndex) {\r\n\t\t\t\t\t\t\t\t\t\tminIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(maxIndex) || index > maxIndex) {\r\n\t\t\t\t\t\t\t\t\t\tmaxIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.isNumber(minIndex)) {\r\n\t\t\t\t\tseries.startIndex = minIndex;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.start = this.start;\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.isNumber(maxIndex)) {\r\n\t\t\t\t\tseries.endIndex = maxIndex + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.end = this.end;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\t//this.validateDataElement(dataItem, itemIndex); // helps to solve shrinking // not good - creates all items\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif ((renderer instanceof AxisRendererY && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (renderer instanceof AxisRendererX && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\tif (dataItem.label.html) {\r\n\t\t\t\t\tthis.ghostLabel.html = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\t\tfillPosition = this.indexToPosition(index, fill.location);\r\n\t\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tthis.dataItemsByCategory.clear();\r\n\t\tsuper.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\t//let existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\t//if (existingDataItem && existingDataItem != dataItem) {\r\n\t\t//\tthis.dataItems.remove(existingDataItem);\r\n\t\t//}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\tlet category: string = <string>(dataContext[this.dataFields.category]);\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.dataItems.create();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param index     Index\r\n\t * @param location  Location (0-1)\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param category  Category\r\n\t * @return Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param startCategory  Start category\r\n\t * @param endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start         [description]\r\n\t * @param end           [description]\r\n\t * @param startLocation [description]\r\n\t * @param endLocation   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param position  Source position (px)\r\n\t * @param location  Location within category (0-1)\r\n\t * @return Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns first series data item with specific category\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getFirstSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = 0; i < series.dataItems.length; i++) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns last series data item with specific category.\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getLastSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = series.dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param series    Target series\r\n\t * @param position  Position (px)\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tif ($type.isNumber(position)) {\r\n\r\n\t\t\tlet index = this.positionToIndex(position);\r\n\r\n\t\t\tif (index >= this.dataItems.length) {\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet category = dataItem.category;\r\n\t\t\t\tlet sdi: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet seriesDataItem = series.dataItems.getIndex(index);\r\n\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryX == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryY == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//@todo\r\n\t\t\t\tif (findNearest) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sdi;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack key (?)\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\t\tif (position < 0) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tif (position > 1) {\r\n\t\t\tposition = 1;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex - this.startLocation - (1 - this.endLocation);\r\n\r\n\t\tposition += 1 / difference * this.startLocation;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= this.dataItems.length) {\r\n\t\t\tindex = this.dataItems.length - 1;\r\n\t\t}\r\n\t\t// not good, when panning out of bounds, each time one less item gets selected\r\n\t\t//if (index >= endIndex) {\r\n\t\t//\tindex--;\r\n\t\t//}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * This is a synonim of `getPositionLabel()` implemented here for consistentcy.\r\n\t *\r\n\t * @since 4.3.8\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic positionToCategory(position: number): string {\r\n\t\treturn this.getPositionLabel(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Current frequency of labels of the axis.\r\n\t *\r\n\t * Normally it would be 1, but when labels start to be hidden due\r\n\t * to `minGridDistance` this read-only property will increase.\r\n\t *\r\n\t * @readonly\r\n\t * @since 4.2.0\r\n\t * @return Label frequency\r\n\t */\r\n\tpublic get frequency(): number {\r\n\t\treturn this._frequency;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setCategory(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setCategory(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tcursorHoverEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t */\r\n\texcludeFromTotal?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\t/**\r\n\t * Dataitem of previously shown tooltip, used to avoid multiple\r\n\t * tooltipshownat dispatches.\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _baseInterval: { [index: string]: ITimeInterval } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.cursorTooltipEnabled = true;\r\n\r\n\t\tthis.cursorHoverEnabled = true;\r\n\t\tthis.excludeFromTotal = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.updateDataItem(dataItem);\r\n\r\n\t\t//dataItem.events.disable();\r\n\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t//dataItem.events.enable();\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(this.xAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(this.yAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected clearCatAxis(axis: CategoryAxis) {\r\n\t\tlet uid = this.uid;\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.seriesDataItems[uid]) {\r\n\t\t\t\tdataItem.seriesDataItems[uid] = [];\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param axis    Axis\r\n\t * @param fields  Fields (?)\r\n\t * @param field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param axis  Axis\r\n\t * @return Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis.y = this.yAxis.pixelY;\r\n\t\tthis.x = this.xAxis.pixelX;\r\n\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tif (!working) {\r\n\t\t\tstartIndex = 0;\r\n\t\t\tendIndex = this.dataItems.length;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tlet stackedSeries = this.stackedSeries;\r\n\t\t\t\tif (stackedSeries) {\r\n\t\t\t\t\tif (stackedSeries.isDisposed()) {\r\n\t\t\t\t\t\tthis.stackedSeries = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstackedSeries.processValues(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared || this.start != 0 || this.end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!working && this.stacked) {\r\n\t\t\tthis.processValues(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding && !this.isShowing) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tlet point = this.showTooltipAtDataItem(dataItem);\r\n\r\n\t\t\tif (point) {\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific dataItem.\r\n\t *\r\n\t * @param dataItem\r\n\t */\r\n\tpublic showTooltipAtDataItem(dataItem: this[\"_dataItem\"]): IPoint {\r\n\t\tthis.returnBulletDefaultState(dataItem);\r\n\t\tif (dataItem && dataItem.visible) {\r\n\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.cursorHoverEnabled) {\r\n\t\t\t\t\t\t\tfor (let sprite of dataItem.sprites) {\r\n\t\t\t\t\t\t\t\tif (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let sprite of this._prevTooltipDataItem.sprites) {\r\n\t\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Bullet): boolean {\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bulletTemplate.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bulletTemplate.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (bulletTemplate.disabled) {\r\n\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\tif (dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t\tpublic positionBullet(bullet: Bullet) {\r\n\t\t\tsuper.positionBullet(bullet);\r\n\t\r\n\t\t\tlet dataItem:XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\t\r\n\t\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\t\tlet xField: string = bullet.xField;\r\n\t\t\tif (!$type.hasValue(xField)) {\r\n\t\t\t\txField = this.xField;\r\n\t\t\t}\r\n\t\r\n\t\t\tlet yField: string = bullet.yField;\r\n\t\t\tif (!$type.hasValue(yField)) {\r\n\t\t\t\tyField = this.yField;\r\n\t\t\t}\r\n\t\r\n\t\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\t\r\n\t\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\t\tlet yOpenField = this.yOpenField;\r\n\t\r\n\t\t\t\t\tlet xAxis = this.xAxis;\r\n\t\t\t\t\tlet yAxis = this.yAxis;\r\n\t\t\t\t\tlet positionX:number;\r\n\t\t\t\t\tlet positionY:number;\r\n\t\t\t\r\n\t\t\t\t\tif((xAxis instanceof DateAxis && (xOpenField && xOpenField != xField)) || xAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationX)){\r\n\t\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(xField);\r\n\t\r\n\t\t\t\t\t\tif(!xOpenField){\r\n\t\t\t\t\t\t\topenValue = xAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\t\r\n\t\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(xAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tpositionX = xAxis.categoryToPosition((<any>dataItem)[xField], bulletLocationX);\r\n\t\t\t\t\t}\t\r\n\t\r\n\t\t\t\t\tif((yAxis instanceof DateAxis &&  (yOpenField && yOpenField != yField)) || yAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationY)){\r\n\t\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(yField);\r\n\t\r\n\t\t\t\t\t\tif(!yOpenField){\r\n\t\t\t\t\t\t\topenValue = yAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\t\r\n\t\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\telse if(yAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], bulletLocationY);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tbullet.visible = true;\r\n\t\r\n\t\t\t\t\tthis.positionBulletReal(bullet, positionX, positionY);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbullet.visible = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n\t\r\n\t\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\t\tbullet.x = this.xAxis.renderer.positionToPoint(positionX).x;\r\n\t\t\tbullet.y = this.yAxis.renderer.positionToPoint(positionY).y;\r\n\t\t}\r\n\t*/\r\n\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\r\n\t\t\t\tbullet.visible = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t * \r\n\t * Note: proper stacking is only possible if series have the same number\r\n\t * of data items. To ensure this, don't set data directly on series\r\n\t * but do this on chart instead.\r\n\t *\r\n\t * @default false\r\n\t * @param stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position? In order this to work, you should set snapTooltip = false on the series baseAxis.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (interpolationDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!field) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\t\t\t\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tlet prevRealValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevRealValue >= 0) || (value < 0 && prevRealValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up base axes\r\n\t\t\tif ($type.hasValue(config.baseAxis) && $type.isString(config.baseAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.baseAxis)) {\r\n\t\t\t\t\tconfig.baseAxis = this.map.getKey(config.baseAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.baseAxis + \"\\\" found for `baseAxis`.\");\r\n\t\t\t\t\tdelete config.baseAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string): IPoint {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * If set to `true` (default), the tooltips set for all series item's\r\n\t * elements like columns and bullets will be automatically shown\r\n\t * when [[XYCursor]] passes over category/date, even if its not hovered\r\n\t * directly over the item.\r\n\t *\r\n\t * Set this to `false` to disable such behavior and display item-specific\r\n\t * tooltips only when hovered directly over them\r\n\t *\r\n\t * @default true\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t *\r\n\t * If set to `true` (default) and chart cursor is enabled on th chart,\r\n\t * hovering over date/category will trigger hover states on related Series\r\n\t * items like bullets and columns.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t * @param  value  Hover enabled?\r\n\t */\r\n\tpublic set cursorHoverEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorHoverEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hover enabled?\r\n\t */\r\n\tpublic get cursorHoverEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorHoverEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Exclude from totals?\r\n\t */\r\n\tpublic set excludeFromTotal(value: boolean) {\r\n\t\tthis.setPropertyValue(\"excludeFromTotal\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from totals?\r\n\t */\r\n\tpublic get excludeFromTotal(): boolean {\r\n\t\treturn this.getPropertyValue(\"excludeFromTotal\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t */\r\n\tsnapToSeries: XYSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tif ((this.snapToSeries && !this.snapToSeries.isHidden)) {\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > getInteraction().getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tthis.getRanges();\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.selection.hide(0);\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries) && $type.isString(config.snapToSeries)) {\r\n\t\t\t\tif (this.map.hasKey(config.snapToSeries)) {\r\n\t\t\t\t\tconfig.snapToSeries = this.map.getKey(config.snapToSeries);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + config.snapToSeries + \"\\\" found for `series`\");\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t *\r\n\t * @param {XYSeries}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\t\t\tif (this._snapToDisposer) {\r\n\t\t\t\tthis._snapToDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tthis._snapToDisposer = series.events.on(\"tooltipshownat\", this.handleSnap, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * [handleSnap description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleSnap() {\r\n\r\n\t\tlet series = this.snapToSeries;\r\n\t\tlet y = series.tooltipY;\r\n\t\tlet x = series.tooltipX;\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tif (this.xAxis.renderer.opposite) {\r\n\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.point = { x: x, y: y };\r\n\t\tthis.getPositions();\r\n\r\n\t\tlet xx = x;\r\n\t\tlet yy = y;\r\n\r\n\t\tx -= this.pixelWidth;\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tif (this.yAxis.renderer.opposite) {\r\n\t\t\t\tx += this.pixelWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet tooltip = series.tooltip;\r\n\t\tlet duration = tooltip.animationDuration;\r\n\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t}\r\n\r\n\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t}\r\n\r\n\t\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\tif (!this.xAxis) {\r\n\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t}\r\n\t\tif (!this.yAxis) {\r\n\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(){\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t this.scrollbarChart.xAxes.each((xAxis)=>{\r\n\t\t\t \tif(xAxis.clonedFrom == sourceSeries.xAxis){\r\n\t\t\t \t\tseries.xAxis = xAxis;\r\n\t\t\t \t}\r\n\t\t\t })\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\t\t\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.padding(0,0,0,0);\r\n\t\t\trenderer.margin(0,0,0,0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t this.scrollbarChart.yAxes.each((yAxis)=>{\r\n\t\t\t \tif(yAxis.clonedFrom == sourceSeries.yAxis){\r\n\t\t\t \t\tseries.yAxis = yAxis;\r\n\t\t\t \t}\r\n\t\t\t })\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Holds a reference to the container axis bullets are drawn in.\r\n\t */\r\n\tpublic axisBulletsContainer: Container;\t\t\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet axisBulletsContainer: Container = this.plotContainer.createChild(Container);\r\n\t\taxisBulletsContainer.shouldClone = false;\r\n\t\taxisBulletsContainer.width = percent(100);\r\n\t\taxisBulletsContainer.height = percent(100);\r\n\t\taxisBulletsContainer.isMeasured = false;\r\n\t\taxisBulletsContainer.zIndex = 4;\r\n\t\taxisBulletsContainer.layout = \"none\";\r\n\t\tthis.axisBulletsContainer = axisBulletsContainer;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tsuper.reinit();\r\n\t\t\r\n\t\tthis.series.each((series) => {\r\n\t\t\tseries.appeared = false;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\trenderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxis: Axis;\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\t\t\tif (snapToSeries) {\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.xAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.yAxis;\r\n\t\t\t\t}\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.yAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._seriesPoints = [];\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\r\n\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\tlet point = seriesPoint.point;\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\tsum += point.y;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet averageY = sum / seriesPoints.length;\r\n\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\tlet dropped = false;\r\n\r\n\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\tlet nextY = top;\r\n\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (axis != except) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = axis.roundPosition(range.end + 0.0001, 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, rangeX.start + (rangeX.end - rangeX.start) * locationX - shiftStep * 0.05);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, rangeX.start + (rangeX.end - rangeX.start) * locationX + shiftStep * 0.05);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, rangeY.start + (rangeY.end - rangeY.start) * locationY - shiftStep * 0.05);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, rangeY.start + (rangeY.end - rangeY.start) * locationY + shiftStep * 0.05);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tthis.xAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tthis.yAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarX, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarY, removeCount);\r\n\t\t}\r\n\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected addScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tchart._parseDataFrom = chart.data.length;\r\n\t\tchart.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected removeScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\twhile (removeCount > 0) {\r\n\t\t\t\tlet dataItem = this.dataItems.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchart.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchart.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tlet dataItem = dataUser.dataItems.getIndex(0);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataUser.dataItems.remove(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tchart._parseDataFrom--;\r\n\r\n\t\t\t\tremoveCount--;\r\n\t\t\t}\r\n\r\n\t\t\tchart.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>) {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarX, count);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarY, count);\r\n\t\t}\r\n\r\n\t\tsuper.removeData(count);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.fill = color();\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.events.copyFrom(source.strokeSprite.events);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.events.copyFrom(source.fillSprite.events);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { LegendDataItem } from \"../Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @default 1.1\r\n\t */\r\n\tautoGapCount?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\tprotected _adjustedStartIndex: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.autoGapCount = 1.1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// this makes data items animate when added\r\n\r\n\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryX\", dataItem.locations.categoryX);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryY\", dataItem.locations.categoryY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegmentWrapper(this._adjustedStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected findAdjustedIndex(adjustedIndex: number, properties: string[]): number {\r\n\t\tlet propertyFields: any = this.propertyFields;\r\n\t\tlet startIndex = adjustedIndex;\r\n\r\n\t\t$array.each(properties, (property) => {\r\n\t\t\tif ($type.hasValue(propertyFields[property])) {\r\n\t\t\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif(dataItem){\r\n\t\t\t\t\t\tif ($type.hasValue(dataItem.properties[property])) {\r\n\t\t\t\t\t\t\tif (adjustedIndex > i) {\r\n\t\t\t\t\t\t\t\tadjustedIndex = i;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn adjustedIndex;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Wraps openSegment call with iterative solution to prevent stack overflow\r\n\t *\r\n\t * @param openIndex  Index\r\n\t * @param axisRange  Range\r\n\t */\r\n\tprotected openSegmentWrapper(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet params = {\r\n\t\t\t\"index\": openIndex,\r\n\t\t\t\"axisRange\": axisRange\r\n\t\t};\r\n\t\tdo {\r\n\t\t\tparams = this.openSegment(params.index, params.axisRange);\r\n\t\t} while (params)\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param openIndex  [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): { \"index\": number, \"axisRange\": AxisDataItem } {\r\n\t\tlet addToClose = false;\r\n\t\tlet points: IPoint[] = [];\r\n\t\topenIndex = Math.min(openIndex, this.dataItems.length);\r\n\t\tlet endIndex: number = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\t\tthis._workingEndIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tlet connect: boolean = this.connect;\r\n\t\tlet valuesFound:boolean = false; // some flag to avoid multiple closes if no values found\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t\tvaluesFound = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect && valuesFound) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (this.baseAxis instanceof DateAxis) {\r\n\t\t\t\tlet next = this.dataItems.getIndex(i + 1)\r\n\t\t\t\tif (next && this.baseAxis.makeGap(next, dataItem)) {\r\n\t\t\t\t\taddToClose = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.closeSegment(segment, points, openIndex, closeIndex, axisRange, addToClose);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment    [description]\r\n\t * @param points     [description]\r\n\t * @param openIndex  [description]\r\n\t * @param closeIndex [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem, add?: boolean) {\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (add) {\r\n\t\t\tcloseIndex++;\r\n\t\t}\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\treturn { \"index\": closeIndex, \"axisRange\": axisRange };\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param itemProperties  Item properties\r\n\t * @param segment         Segment\r\n\t * @return Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"connect\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.stroke;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\r\n\t\t\tif ((bullet instanceof Bullet) && !bullet.copyToLegendMarker) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet hasLabels: boolean = false;\r\n\r\n\t\t\tif (bullet instanceof Container) {\r\n\t\t\t\t// do not copy bullets with labels\r\n\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (!hasLabels) {\r\n\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\tclone.parent = marker;\r\n\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\tclone.x = w / 2;\r\n\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t}\r\n\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @since 4.2.4\r\n\t * @param  value  Gap count\r\n\t */\r\n\tpublic set autoGapCount(value: number) {\r\n\t\tthis.setPropertyValue(\"autoGapCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Gap count\r\n\t */\r\n\tpublic get autoGapCount(): number {\r\n\t\treturn this.getPropertyValue(\"autoGapCount\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\n//import { Sprite } from \"../../core/Sprite\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\t/*\r\n\t\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\t\t\r\n\t\t\tlet rendererX:AxisRendererCircular = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\t\tlet rendererY:AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\t\t\r\n\t\t\tlet angle = rendererX.positionToAngle(positionX);\r\n\t\t\tlet radius = rendererY.positionToCoordinate(positionY);\r\n\t\r\n\t\t\tif(angle < this.chart.startAngle || angle > this.chart.endAngle){\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\r\n\t\t\tbullet.x = $math.cos(angle) * radius;\r\n\t\t\tbullet.y = $math.sin(angle) * radius;\r\n\t\t}\t*/\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\t\t\r\n\r\n\t\tpoint = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) }\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\t\tthis.axisBulletsContainer = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"hands\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"hands\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tconst startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tif (this.setPropertyValue(\"depth\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tvalue = $math.fitToRange(value, 0, 90);\r\n\t\tif (this.setPropertyValue(\"angle\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer(){\r\n\t\tif(!this._bulletsContainer){\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask(){\r\n\t\tif(!this._bulletsMask){\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif(color instanceof Color){\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false;\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif(middleLine){\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tgetTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tgetTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient(){\r\n\t\tif(!this._gradient){\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link:FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif(this._parseDataFrom == 0){\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif(!node.dataItem.visible){\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"], name?:string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif($type.isNumber(value)){\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif($type.isNumber(value)){\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes():DictionaryTemplate<string, this[\"_node\"]>{\r\n\t\tif(!this._nodes){\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event)=>{\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links():ListTemplate<this[\"_link\"]>{\r\n\t\tif(!this._links){\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node)=>{\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData(){\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/FlowDiagram.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ILabelBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ILabelBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILabelBulletAdapters extends IBulletAdapters, ILabelBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class LabelBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILabelBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILabelBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILabelBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"LabelBullet\";\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.hideOversized = false;\r\n\r\n\t\tlabel.maxWidth = 500;\r\n\t\tlabel.maxHeight = 500;\r\n\r\n\t\tlabel.stroke = color();\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.fill = new InterfaceColorSet().getFor(\"text\");\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.handleMaxSize, this, false);\r\n\r\n\t\tthis.label = label;\r\n\r\n\t\t// not good, as lineSeries will have labels somewhere in the middle.\r\n\t\t//this.locationX = 0.5;\r\n\t\t//this.locationY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected handleMaxSize(){\r\n\t\tthis.label.maxWidth = this.maxWidth;\r\n\t\tthis.label.maxHeight = this.maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[LabelBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/LabelBullet.ts","/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyNode.ts","/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyLink.ts","/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\t//@todo solve circular so\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\t\t\tvalue = value * availableHeight / (availableHeight - (this._levelNodesCount[key] - 1) * this.nodePadding);\r\n\r\n\t\t\tif (this.maxSum < value) {\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / this._levelCount;\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / this._levelCount;\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SankeyDiagram.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realX: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realY: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", this.handleKidAdded, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleKidAdded() {\r\n\t\tif (this.layout == \"none\") {\r\n\t\t\tthis.layout = \"absolute\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet column = this.column;\r\n\t\tif (column) {\r\n\t\t\tcolumn.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tcolumn.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t\tif(column.invalid){\r\n\t\t\t\tcolumn.validate(); // important!\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Column]].\r\n\t *\r\n\t * @param source Source Column\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tif (this.column) {\r\n\t\t\treturn { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t\tcolumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = bullet.locationX;\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = bullet.locationY;\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.hide(duration);\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.show(duration, delay, fields);\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t\tdataItem.show(duration);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t\tdataItem.hide(duration);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it wont' be shown\r\n\t\tif(zoomOutButton){\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\treturn this.getLegendLevel(dataItem.children.getIndex(0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D || 0;\r\n\t\tlet dy = this.chart.dy3D || 0;\r\n\t\tthis.baseGrid.path =  $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t\tif(this.column3D.invalid){\r\n\t\t\t\tthis.column3D.validate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Column3D]].\r\n\t *\r\n\t * @param source Source Column3D\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\t\tthis.column.fill = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif(this.chart){\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.columns.each((column) => {\r\n\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif(inversed){\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t */\r\n\thighDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueYShow?: CalculatedValue;\t\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\t/**\r\n\t * Sets type of the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]) {\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.stroke;\r\n\t\tlegendDataItem.colorOrig = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tradarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = rangeColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.paper = this.paper;\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/*\r\n\t\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\t\t\r\n\t\t\tlet rendererX:AxisRendererCircular = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\t\tlet rendererY:AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\t\t\r\n\t\t\tlet angle = rendererX.positionToAngle(positionX);\r\n\t\t\tlet radius = rendererY.positionToCoordinate(positionY);\r\n\t\r\n\t\t\tif(angle < this.chart.startAngle || angle > this.chart.endAngle){\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\r\n\t\t\tbullet.x = $math.cos(angle) * radius;\r\n\t\t\tbullet.y = $math.sin(angle) * radius;\r\n\t\t}*/\r\n\r\n\t/*\r\n\t\tpublic positionBullet(bullet: Bullet) {\r\n\t\t\tsuper.positionBullet(bullet);\r\n\t\r\n\t\t\tlet dataItem:RadarColumnSeriesDataItem = <RadarColumnSeriesDataItem>bullet.dataItem;\r\n\t\r\n\t\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\t\tlet xField: string = bullet.xField;\r\n\t\t\tif (!$type.hasValue(xField)) {\r\n\t\t\t\txField = this.xField;\r\n\t\t\t}\r\n\t\r\n\t\t\tlet yField: string = bullet.yField;\r\n\t\t\tif (!$type.hasValue(yField)) {\r\n\t\t\t\tyField = this.yField;\r\n\t\t\t}\r\n\t\r\n\t\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\t\r\n\t\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\t\tlet yOpenField = this.yOpenField;\r\n\t\t\t\t\tlet angle:number;\r\n\t\t\t\t\tlet radius:number;\r\n\t\r\n\t\t\t\t\tlet xAxis = this.xAxis;\r\n\t\t\t\t\tlet yAxis = this.yAxis;\r\n\t\t\t\t\tlet position:number;\r\n\t\t\t\r\n\t\t\t\t\tif((xAxis instanceof DateAxis && (xOpenField && xOpenField != xField)) || xAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationX)){\r\n\t\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(xField);\r\n\t\r\n\t\t\t\t\t\tif(!xOpenField){\r\n\t\t\t\t\t\t\topenValue = xAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\t\r\n\t\t\t\t\t\tposition = xAxis.valueToPosition(middleValue);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(xAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tposition = xAxis.categoryToPosition((<any>dataItem)[xField], bulletLocationX);\r\n\t\t\t\t\t}\t\r\n\t\r\n\t\t\t\t\tlet renderer:AxisRendererCircular = <AxisRendererCircular>xAxis.renderer;\r\n\t\r\n\t\t\t\t\tangle = renderer.positionToAngle(position);\r\n\t\r\n\t\t\t\t\tif(angle < this.chart.startAngle || angle > this.chart.endAngle){\r\n\t\t\t\t\t\tbullet.visible = false;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif((yAxis instanceof DateAxis &&  (yOpenField && yOpenField != yField)) || yAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationY)){\r\n\t\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(yField);\r\n\t\r\n\t\t\t\t\t\tif(!yOpenField){\r\n\t\t\t\t\t\t\topenValue = yAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\t\r\n\t\t\t\t\t\tpoint = yAxis.valueToPoint(middleValue);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\telse if(yAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tpoint = yAxis.categoryToPoint((<any>dataItem)[yField], bulletLocationY);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tradius = $math.getDistance(point);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbullet.moveTo({x:radius * $math.cos(angle), y:radius * $math.sin(angle)});\r\n\t\r\n\t\t\t\t\tbullet.visible = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbullet.visible = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}*/\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = \"\";\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = \"\"\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelSlice.ts","/**\r\n * Funnel tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickProperties extends ITickProperties {\r\n\tlocationX?: number;\r\n\r\n\tlocationY?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelTickAdapters extends ITickAdapters, IFunnelTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nexport class FunnelTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<Label>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<FunnelSlice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelTick\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\r\n\t\tthis.setPropertyValue(\"locationX\", 0);\r\n\t\tthis.setPropertyValue(\"locationY\", 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: FunnelSlice = this.slice;\r\n\t\tlet point = slice.getPoint(this.locationX, this.locationY);\r\n\r\n\t\tif (point) {\r\n\t\t\tlet label = this.label;\r\n\r\n\t\t\tlet series = <FunnelSeries>slice.dataItem.component;\r\n\r\n\t\t\tif (series.orientation == \"vertical\") {\r\n\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tx1 += label.maxRight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tlet p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\r\n\t\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\ty1 += label.maxBottom;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tlet p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\r\n\t\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [[FunnelSlice]] element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: FunnelSlice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this, false),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return FunnelSlice\r\n\t */\r\n\tpublic get slice(): FunnelSlice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tthis.setPropertyValue(\"locationX\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tthis.setPropertyValue(\"locationY\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelTick.ts","/**\r\n * Defines Funnel Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SlicedChart } from \"../types/SlicedChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FunnelSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * A reference to a label element.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a tick element.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FunnelSeries;\r\n\r\n\t/**\r\n\t * Defines a type of elements linking slices.\r\n\t */\r\n\tpublic _sliceLink: FunnelSlice;\r\n\r\n\t/**\r\n\t * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get sliceLink(): this[\"_sliceLink\"] {\r\n\t\tif (!this._sliceLink) {\r\n\t\t\tlet sliceLink = this.component.sliceLinks.create();\r\n\t\t\tthis._sliceLink = sliceLink;\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\t\t\tsliceLink.parent = this.component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.sliceLinks.removeValue(sliceLink);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(sliceLink);\r\n\t\t\tsliceLink.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._sliceLink;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesDataFields extends IPercentSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative width of the slice bottom. See description of `bottomRatio`\r\n\t * property for full description.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tbottomRatio?: number;\r\n\r\n\t/**\r\n\t * Orientation of series\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tlabelsOpposite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSeriesAdapters extends IPercentSeriesAdapters, IFunnelSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: SlicedChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IFunnelSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: FunnelSeriesDataItem;\r\n\r\n\r\n\tprotected _nextY: number = 0;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _sliceLinks: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * Holds sum of values for all slices\r\n\t */\r\n\tprotected _total: number;\r\n\r\n\t/**\r\n\t * Holds number of slices.\r\n\t */\r\n\tprotected _count: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FunnelSeries\";\r\n\t\tthis.orientation = \"vertical\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.slicesContainer.width = percent(100);\r\n\t\tthis.slicesContainer.height = percent(100);\r\n\r\n\t\tthis._disposers.push(this.slicesContainer.events.on(\"maxsizechanged\", this.invalidateDataItems, this, false));\r\n\r\n\t\tthis.labelsOpposite = true;\r\n\r\n\t\tthis.labelsContainer.layout = \"absolute\";\r\n\r\n\t\tthis.bottomRatio = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelSlice]] element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new FunnelSlice();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelTick]] element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new FunnelTick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Funnel Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FunnelSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.expandDistance = 0.2;\r\n\t}\r\n\r\n\t/**\r\n\t * [initLabel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param label [description]\r\n\t */\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tsuper.initLabel(label);\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.isMeasured = true;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextY = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\r\n\t\tlet slicesContainer = this.slicesContainer;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlabelTemplate.interactionsEnabled = true;\r\n\t\t\tslicesContainer.isMeasured = true;\r\n\t\t\tlabelsContainer.isMeasured = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabelTemplate.interactionsEnabled = false;\r\n\t\t\tslicesContainer.isMeasured = false;\r\n\t\t\tlabelsContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\t\tthis.dataItems.each((dItem) => {\r\n\t\t\tif ($type.hasValue(dItem.value)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (dItem.value > 0) {\r\n\t\t\t\t\ttotal += dItem.getWorkingValue(\"value\") / dItem.value;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttotal += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._total = 1 / count * total;\r\n\t\tthis._count = count;\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tthis.arrangeLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\r\n\t\t\tif (!nextItem.visible || nextItem.isHiding) {\r\n\t\t\t\treturn this.getNextValue(nextItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [formDataElement description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected formDataElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif ($type.hasValue(dataItem.value)) {\r\n\t\t\t// FunnelSlice\r\n\t\t\tlet slice = dataItem.slice;\r\n\t\t\tslice.orientation = this.orientation;\r\n\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tsliceLink.orientation = this.orientation;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tthis.decorateSlice(dataItem);\r\n\r\n\t\t\tsliceLink.fill = slice.fill;\r\n\r\n\t\t\tif (dataItem.index == this.dataItems.length - 1) {\r\n\t\t\t\tsliceLink.disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\t\tlet bottomRatio = this.bottomRatio;\r\n\r\n\t\tlet d = 1;\r\n\t\tif (dataItem.value > 0) {\r\n\t\t\td = workingValue / dataItem.value;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tlet linkHeight = sliceLink.pixelHeight * d;\r\n\r\n\t\t\tmaxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\tslice.height = $math.max(0, maxHeight / this._count * d / this._total - linkHeight);\r\n\r\n\t\t\tslice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = undefined;\r\n\t\t\t}\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linkWidth = sliceLink.pixelWidth * d;\r\n\r\n\t\t\tmaxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tslice.width = maxWidth / this._count * d * 1 / this._total - linkWidth;\r\n\t\t\tslice.y = maxHeight / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [arrangeLabels description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected arrangeLabels(): void {\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlet count = this.labels.length;\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tlet lastLabel = this.labels.getIndex(count - 1);\r\n\r\n\t\t\t\tlet lastY = lastLabel.pixelY;\r\n\t\t\t\tlet lastX = lastLabel.pixelX;\r\n\r\n\t\t\t\tif (count > 1) {\r\n\t\t\t\t\tfor (let i = count - 2; i >= 0; i--) {\r\n\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\r\n\t\t\t\t\t\tif (label.visible) {\r\n\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\tif (label.pixelY + label.measuredHeight > lastY) {\r\n\t\t\t\t\t\t\t\t\tlabel.y = lastY - label.measuredHeight;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (label.pixelX + label.measuredWidth > lastX) {\r\n\t\t\t\t\t\t\t\t\tlabel.x = lastX - label.measuredWidth;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlastY = label.pixelY;\r\n\t\t\t\t\t\t\tlastX = label.pixelX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlastY = 0;\r\n\t\t\t\t\tlastX = 0;\r\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\t\t\t\t\t\tif (label.visible) {\r\n\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\tif (label.pixelY < lastY) {\r\n\t\t\t\t\t\t\t\t\tlabel.y = lastY;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (label.pixelX < lastX) {\r\n\t\t\t\t\t\t\t\t\tlabel.x = lastX;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlastY += label.measuredHeight;\r\n\t\t\t\t\t\t\tlastX += label.measuredWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: FunnelSlice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tbullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n\t\tbullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\t\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t\t\tthis.invalidate();\r\n\t\t\tif (value == \"vertical\") {\r\n\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\tthis.ticks.template.locationY = 0.5;\r\n\t\t\t\tthis.labels.template.rotation = 0;\r\n\t\t\t\tthis.layout = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.ticks.template.locationX = 0.5;\r\n\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\tthis.labels.template.rotation = -90;\r\n\t\t\t\tthis.layout = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's bottom will change in relation to slices top AND\r\n\t * next slices top.\r\n\t *\r\n\t * Basically it's a relative value (0-1) that indicates bottom width\r\n\t * position between current slice's top width and the top withd of the next\r\n\t * one.\r\n\t *\r\n\t * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n\t * slice with).\r\n\t *\r\n\t * `0` (default) will mean that bottom will be the same as top, resulting in\r\n\t * a prefectly square slice.\r\n\t *\r\n\t * From the data-viz standpoint `0` is a correct setting, since area of the\r\n\t * slices will depict their value correctly.\r\n\t *\r\n\t * `1` will mean that slice will become trapezoid with its bottom matching\r\n\t * width of the next slice.\r\n\t *\r\n\t * `0.5` will make bottom width be in the middle of width of current slice\r\n\t * and the next slice.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set bottomRatio(value: number) {\r\n\t\tif (this.setPropertyValue(\"bottomRatio\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get bottomRatio(): number {\r\n\t\treturn this.getPropertyValue(\"bottomRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of elements linking each actual slice.\r\n\t *\r\n\t * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n\t * so they have all the same configuration options.\r\n\t *\r\n\t * You can use `template` of this link, to specify how links will look.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"FunnelSeries\",\r\n\t *      // ...\r\n\t *      \"sliceLinks\": {\r\n\t *        \"fillOpacity\": 0.5\r\n\t *      }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Funnel links\r\n\t */\r\n\tpublic get sliceLinks(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._sliceLinks) {\r\n\t\t\tlet sliceLink = new FunnelSlice();\r\n\t\t\tsliceLink.applyOnClones = true;\r\n\t\t\tsliceLink.fillOpacity = 0.5;\r\n\t\t\tsliceLink.expandDistance = - 0.3;\r\n\t\t\tsliceLink.hiddenState.properties.opacity = 0;\r\n\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\r\n\t\t\tthis._sliceLinks = new ListTemplate(sliceLink);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._sliceLinks));\r\n\t\t}\r\n\t\treturn this._sliceLinks;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, [\"value\"]);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[] = [\"value\"];\r\n\t\tlet value: number = 0;\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t});\r\n\r\n\t\tlet animation: Animation = super.hide(duration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tsuper.setAlignLabels(value);\r\n\t\tthis.ticks.template.disabled = !value;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tif (labelsContainer) {\r\n\t\t\t// do not align\r\n\t\t\tif (!value) {\r\n\t\t\t\tlabelsContainer.width = percent(100);\r\n\t\t\t\tlabelsContainer.height = percent(100);\r\n\t\t\t}\r\n\t\t\t//align\r\n\t\t\telse {\r\n\t\t\t\tlabelsContainer.height = undefined;\r\n\t\t\t\tlabelsContainer.width = undefined;\r\n\t\t\t\tlabelsContainer.margin(10, 10, 10, 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t}\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * This setting is only used if `alignLabels = true`.\r\n\t *\r\n\t * If set to `true` (default) labels will be drawn to the right (on vertical\r\n\t * series), or to the bottom (on horizontal series).\r\n\t *\r\n\t * If set to `false`, labels will be positioned to the left or top\r\n\t * respectively.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.1.13\r\n\t * @param  value  Labels on opposite side?\r\n\t */\r\n\tpublic set labelsOpposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"labelsOpposite\", value)\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tlet labelAlign: Align = \"none\";\r\n\t\tlet labelValign: VerticalAlign = \"none\";\r\n\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlabelAlign = \"center\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelValign = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// opposite (left/bottom)\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.labelsContainer.toFront();\r\n\t\t\t\t// left\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"left\";\r\n\t\t\t\t\tlabelAlign = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\t// bottom\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"right\";\r\n\t\t\t\t\tlabelValign = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// non oposite (right/top)\r\n\t\t\telse {\r\n\t\t\t\tthis.labelsContainer.toBack();\r\n\t\t\t\t// right\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 0;\r\n\t\t\t\t\tlabelAlign = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\t// top\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelValign = \"top\";\r\n\t\t\t\t\tthis.ticks.template.locationY = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlabelTemplate.align = labelAlign;\r\n\t\tlabelTemplate.valign = labelValign;\r\n\r\n\t\tthis.validateLayout();\r\n\t\tthis.ticks.each((tick) => {\r\n\t\t\ttick.invalidate();\r\n\t\t})\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels on opposite side?\r\n\t */\r\n\tpublic get labelsOpposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"labelsOpposite\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/FunnelSeries.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif (sum == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - newHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y;\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - newWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tcolumn = dataItem.column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ErrorBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = null\n// module chunks = "],"sourceRoot":""}